{
	"name": "DF_SALESTYPE",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Azure_STAGE_SALES_DF",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "Azure_STAGE_TYPE_DF",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSql_STAGE_SALESTYPE",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "DCSKDateASOfDate"
				},
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "select1"
				},
				{
					"name": "surrogateKey1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          InvoiceNumber as string,",
				"          Date as date,",
				"          Type as string,",
				"          Period as date,",
				"          DueDate as string,",
				"          InvoiceDate as string,",
				"          FromDate as date,",
				"          ToDate as date,",
				"          NetAmount as decimal(18,2),",
				"          VatAmount as decimal(18,2),",
				"          grossValue as integer,",
				"          stage_createdDate as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source(output(",
				"          SKTransType as integer,",
				"          BKTransType as string,",
				"          TransDesc as string,",
				"          stage_createdDate as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source1 derive(SKDate = concat(\r",
				"    substring(toString(Date, 'dd-MM-yyyy'), 0, 2),\r",
				"    substring(toString(Date, 'dd-MM-yyyy'), 4, 2),\r",
				"    substring(toString(Date, 'dd-MM-yyyy'), 7, 4)\r",
				"   \r",
				"),",
				"          AsOfDate = toString(\r",
				"    toDate(\r",
				"        concat(\r",
				"            substring(\r",
				"                toString(\r",
				"                    addMonths(Date, 1)\r",
				"                ), 0, 7\r",
				"            ), '-01'\r",
				"        ), 'yyyy-MM-dd'\r",
				"    ) - 1, 'dd-MM-yyyy'\r",
				")\r",
				",",
				"          CharecontrolNumber = concat(Type, '-', InvoiceNumber)\r",
				") ~> DCSKDateASOfDate",
				"DCSKDateASOfDate, source2 join(Type == BKTransType,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive({Amount _Paid/Received} = (NetAmount+VatAmount)*grossValue) ~> derivedColumn1",
				"derivedColumn1 derive({Amount _Paid/ReceivedDesc} = iif(\r",
				"    {Amount _Paid/Received} >= 800000.00,\r",
				"    iif(\r",
				"       Type == 'C', 'charge is high',\r",
				"       iif(\r",
				"          Type == 'P', 'Payable is high',\r",
				"          iif(\r",
				"             Type == 'K', 'Cheque is high',\r",
				"             iif(\r",
				"                Type == 'J', 'Journal entry is high',\r",
				"                iif(\r",
				"                    Type == 'R', 'Receipt is high',\r",
				"                    'Unknown Type'\r",
				"                )\r",
				"             )\r",
				"          )\r",
				"       )\r",
				"    ),\r",
				"    iif(\r",
				"       {Amount _Paid/Received} >= 400000.00,\r",
				"       iif(\r",
				"          Type == 'C', 'charge is medium',\r",
				"          iif(\r",
				"             Type == 'P', 'Payable is medium',\r",
				"             iif(\r",
				"                Type == 'K', 'Cheque is medium',\r",
				"                iif(\r",
				"                    Type == 'J', 'Journal entry is medium',\r",
				"                    iif(\r",
				"                       Type == 'R', 'Receipt is medium',\r",
				"                       'Unknown Type'\r",
				"                    )\r",
				"                )\r",
				"             )\r",
				"          )\r",
				"       ),\r",
				"       iif(\r",
				"          {Amount _Paid/Received} >= 100000.00,\r",
				"          iif(\r",
				"             Type == 'C', 'charge is Low',\r",
				"             iif(\r",
				"                Type == 'P', 'Payable is Low',\r",
				"                iif(\r",
				"                    Type == 'K', 'Cheque is Low',\r",
				"                    iif(\r",
				"                       Type == 'J', 'Journal entry is Low',\r",
				"                       iif(\r",
				"                          Type == 'R', 'Receipt is Low',\r",
				"                          'Unknown Type'\r",
				"                       )\r",
				"                    )\r",
				"                )\r",
				"             )\r",
				"          ),\r",
				"          iif(\r",
				"             {Amount _Paid/Received} < 100000.00,\r",
				"             iif(\r",
				"                Type == 'C', 'charge is very Low',\r",
				"                iif(\r",
				"                    Type == 'P', 'Payable is very Low',\r",
				"                    iif(\r",
				"                       Type == 'K', 'Cheque is very Low',\r",
				"                       iif(\r",
				"                          Type == 'J', 'Journal entry is very Low',\r",
				"                          iif(\r",
				"                             Type == 'R', 'Receipt is very Low',\r",
				"                             'Unknown Type'\r",
				"                          )\r",
				"                       )\r",
				"                    )\r",
				"                )\r",
				"             ),\r",
				"             'unknown'\r",
				"          )\r",
				"       )\r",
				"    )\r",
				")) ~> derivedColumn2",
				"derivedColumn2 derive(FileName = concat(\r",
				"  'sales_', \r",
				"  substring(toString(currentDate(),'dd-MM-yyyy'), 0, 2) ,\r",
				"  substring(toString(currentDate(),'dd-MM-yyyy'), 4, 2) , \r",
				"  substring(toString(currentDate(),'dd-MM-yyyy'), 7, 4), \r",
				"  '.xlsx'\r",
				")\r",
				",",
				"          CreatedDate = currentDate()) ~> derivedColumn3",
				"derivedColumn3 select(mapColumn(",
				"          InvoiceNumber,",
				"          Date,",
				"          Type,",
				"          Period,",
				"          DueDate,",
				"          InvoiceDate,",
				"          FromDate,",
				"          ToDate,",
				"          NetAmount,",
				"          VatAmount,",
				"          grossValue,",
				"          SKDate,",
				"          AsOfDate,",
				"          CharecontrolNumber,",
				"          SKTransType,",
				"          TransDesc,",
				"          {Amount _Paid/Received},",
				"          {Amount _Paid/ReceivedDesc},",
				"          FileName,",
				"          CreatedDate",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select1",
				"select1 keyGenerate(output(InvoiceId as long),",
				"     startAt: 100L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     preSQLs:['truncate table stage.salestype'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          InvoiceNumber,",
				"          Date,",
				"          Type,",
				"          Period,",
				"          DueDate,",
				"          InvoiceDate,",
				"          FromDate,",
				"          ToDate,",
				"          NetAmount,",
				"          VatAmount,",
				"          grossValue,",
				"          SKDate,",
				"          AsOfDate,",
				"          CharecontrolNumber,",
				"          SKTransType,",
				"          TransDesc,",
				"          {Amount _Paid/Received},",
				"          {Amount _Paid/ReceivedDesc},",
				"          FileName,",
				"          CreatedDate,",
				"          InvoiceId",
				"     )) ~> sink1"
			]
		}
	}
}