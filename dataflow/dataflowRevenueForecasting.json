{
	"name": "dataflowRevenueForecasting",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable_Sales_SalesOrderHeader",
						"type": "DatasetReference"
					},
					"name": "SalesSalesOrderHeader"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTableSalesCustomer",
						"type": "DatasetReference"
					},
					"name": "sourceSalesCustomer"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable_SalesORderDetails",
						"type": "DatasetReference"
					},
					"name": "sourceSalesOrderDetails"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "joinSalesOrderHeadertoSalesCustomer"
				},
				{
					"name": "select1"
				},
				{
					"name": "join1"
				},
				{
					"name": "select2"
				},
				{
					"name": "filter1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SalesOrderID as integer,",
				"          RevisionNumber as integer,",
				"          OrderDate as timestamp,",
				"          DueDate as timestamp,",
				"          ShipDate as timestamp,",
				"          Status as integer,",
				"          OnlineOrderFlag as boolean,",
				"          SalesOrderNumber as string,",
				"          PurchaseOrderNumber as string,",
				"          AccountNumber as string,",
				"          CustomerID as integer,",
				"          SalesPersonID as integer,",
				"          TerritoryID as integer,",
				"          BillToAddressID as integer,",
				"          ShipToAddressID as integer,",
				"          ShipMethodID as integer,",
				"          CreditCardID as integer,",
				"          CreditCardApprovalCode as string,",
				"          CurrencyRateID as integer,",
				"          SubTotal as decimal(19,4),",
				"          TaxAmt as decimal(19,4),",
				"          Freight as decimal(19,4),",
				"          TotalDue as decimal(19,4),",
				"          Comment as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SalesSalesOrderHeader",
				"source(output(",
				"          CustomerID as integer,",
				"          PersonID as integer,",
				"          StoreID as integer,",
				"          TerritoryID as integer,",
				"          AccountNumber as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourceSalesCustomer",
				"source(output(",
				"          SalesOrderID as integer,",
				"          SalesOrderDetailID as integer,",
				"          CarrierTrackingNumber as string,",
				"          OrderQty as integer,",
				"          ProductID as integer,",
				"          SpecialOfferID as integer,",
				"          UnitPrice as decimal(19,4),",
				"          UnitPriceDiscount as decimal(19,4),",
				"          LineTotal as decimal(38,6),",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourceSalesOrderDetails",
				"SalesSalesOrderHeader, sourceSalesCustomer join(SalesSalesOrderHeader@CustomerID == sourceSalesCustomer@CustomerID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinSalesOrderHeadertoSalesCustomer",
				"joinSalesOrderHeadertoSalesCustomer select(mapColumn(",
				"          SalesOrderID,",
				"          OrderDate,",
				"          DueDate,",
				"          SalesOrderNumber,",
				"          PurchaseOrderNumber,",
				"          AccountNumber = SalesSalesOrderHeader@AccountNumber,",
				"          CustomerID = SalesSalesOrderHeader@CustomerID,",
				"          SalesPersonID,",
				"          TerritoryID = SalesSalesOrderHeader@TerritoryID,",
				"          SubTotal,",
				"          TaxAmt,",
				"          TotalDue,",
				"          TerritoryID = sourceSalesCustomer@TerritoryID,",
				"          AccountNumber = sourceSalesCustomer@AccountNumber",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, sourceSalesOrderDetails join(select1@SalesOrderID == sourceSalesOrderDetails@SalesOrderID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          SalesOrderID = select1@SalesOrderID,",
				"          OrderDate,",
				"          DueDate,",
				"          SalesOrderNumber,",
				"          CustomerID,",
				"          SalesPersonID,",
				"          TerritoryID,",
				"          TotalDue,",
				"          OrderQty,",
				"          ProductID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 filter(year(OrderDate) == 2014) ~> filter1",
				"filter1 aggregate(groupBy(ProductID,",
				"          OrderQty,",
				"          CustomerID,",
				"          OrderDate = month(OrderDate)),",
				"     sum_TotalDue = sum(TotalDue)\r",
				"\r",
				") ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}