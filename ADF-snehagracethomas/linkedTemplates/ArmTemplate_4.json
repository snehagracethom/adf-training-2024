{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADF-snehagracethomas"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/exam_5th_azuredb_storageacc_json')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DepartmentID",
											"type": "Int16"
										},
										"sink": {
											"path": "$['DepartmentID']"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String"
										},
										"sink": {
											"path": "$['Name']"
										}
									},
									{
										"source": {
											"name": "GroupName",
											"type": "String"
										},
										"sink": {
											"path": "$['GroupName']"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['ModifiedDate']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable_HumanResources_Dept",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Json1_salesorderdetails",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "kjc_project"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {
								"x-api-key": "live_FXkkrj2UaYgJH38QHlxXC2R6sPDP0iFNsIuHdzuortLby3T4rKde7O4bAkwMtkGu"
							},
							"url": "https://api.thecatapi.com/v1/images/search"
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['id']"
										},
										"sink": {
											"name": "id"
										}
									},
									{
										"source": {
											"path": "$['url']"
										},
										"sink": {
											"name": "url"
										}
									},
									{
										"source": {
											"path": "$['width']"
										},
										"sink": {
											"name": "width"
										}
									},
									{
										"source": {
											"path": "$['height']"
										},
										"sink": {
											"name": "height"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "RestResource1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText3",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Sharmila_works"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "EmpId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "varchar"
					},
					{
						"name": "LastName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Employees"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "EmpId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Firstname",
						"type": "varchar"
					},
					{
						"name": "Lastname",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "destEmployee"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer3",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "Id",
						"type": "nchar"
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "RollNo",
						"type": "varchar"
					},
					{
						"name": "Country",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tableadf"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable_Employee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer4_AdventureWorksDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "EmpId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "varchar"
					},
					{
						"name": "LastName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Employees"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable_HumanResources_Department')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer4_AdventureWorksDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "DepartmentID",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "GroupName",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "HumanResources",
					"table": "Department"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable_Production_product')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_adventureworks_2022",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ProductNumber",
						"type": "nvarchar"
					},
					{
						"name": "MakeFlag",
						"type": "bit"
					},
					{
						"name": "FinishedGoodsFlag",
						"type": "bit"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "SafetyStockLevel",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ReorderPoint",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "StandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ListPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "SizeUnitMeasureCode",
						"type": "nchar"
					},
					{
						"name": "WeightUnitMeasureCode",
						"type": "nchar"
					},
					{
						"name": "Weight",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "DaysToManufacture",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductLine",
						"type": "nchar"
					},
					{
						"name": "Class",
						"type": "nchar"
					},
					{
						"name": "Style",
						"type": "nchar"
					},
					{
						"name": "ProductSubcategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductModelID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SellStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SellEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DiscontinuedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "Production",
					"table": "Product"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable_destEmployee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SqlServer_Destinationdb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "EmpId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Firstname",
						"type": "varchar"
					},
					{
						"name": "Lastname",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "destEmployee"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable_employee_Details')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SqlServer_Destinationdb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "name",
						"type": "varchar"
					},
					{
						"name": "salary",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "age",
						"type": "int",
						"precision": 10
					},
					{
						"name": "profile_image",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Employee_details"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable_production_product_destinationdb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SqlServer_Destinationdb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "ProductId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "MakeFlag",
						"type": "nchar"
					},
					{
						"name": "Color",
						"type": "varchar"
					},
					{
						"name": "ListPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "StandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Class",
						"type": "nvarchar"
					},
					{
						"name": "Style",
						"type": "nchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Production_Product"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable_tableUSA')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQLServer_assessmentdb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Date",
						"type": "date"
					},
					{
						"name": "Zip",
						"type": "varchar"
					},
					{
						"name": "Units",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Revenue",
						"type": "varchar"
					},
					{
						"name": "Country",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tableUSA"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable_tableadf')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQLServer_assessmentdb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "Id",
						"type": "nchar"
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "RollNo",
						"type": "varchar"
					},
					{
						"name": "Country",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tableadf"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable_tablecountry')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer3",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Date",
						"type": "date"
					},
					{
						"name": "Zip",
						"type": "varchar"
					},
					{
						"name": "Units",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Revenue",
						"type": "varchar"
					},
					{
						"name": "Country",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tablecountry"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Table_HumanResources_Department')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_adventureworks_2022",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "DepartmentID",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "GroupName",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "HumanResources",
					"table": "Department"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/julyexcel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "julyactivity",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "july1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/table_department_destinationdb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SqlServer_Destinationdb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "DepId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "name",
						"type": "varchar"
					},
					{
						"name": "Groupname",
						"type": "varchar"
					},
					{
						"name": "datemodified",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Department"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_SALESTYPE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Azure_STAGE_SALES_DF",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "Azure_STAGE_TYPE_DF",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "azure_stage_SalesType",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DCSKDateASOfDate"
						},
						{
							"name": "join1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "select1"
						},
						{
							"name": "surrogateKey1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          InvoiceNumber as string,",
						"          Date as date,",
						"          Type as string,",
						"          Period as date,",
						"          DueDate as string,",
						"          InvoiceDate as string,",
						"          FromDate as date,",
						"          ToDate as date,",
						"          NetAmount as decimal(18,2),",
						"          VatAmount as decimal(18,2),",
						"          grossValue as integer,",
						"          stage_createdDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          SKTransType as integer,",
						"          BKTransType as string,",
						"          TransDesc as string,",
						"          stage_createdDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source1 derive(SKDate = concat(\r",
						"    substring(toString(Date, 'dd-MM-yyyy'), 0, 2),\r",
						"    substring(toString(Date, 'dd-MM-yyyy'), 4, 2),\r",
						"    substring(toString(Date, 'dd-MM-yyyy'), 7, 4)\r",
						"   \r",
						"),",
						"          AsOfDate = toString(\r",
						"    toDate(\r",
						"        concat(\r",
						"            substring(\r",
						"                toString(\r",
						"                    addMonths(Date, 1)\r",
						"                ), 0, 7\r",
						"            ), '-01'\r",
						"        ), 'yyyy-MM-dd'\r",
						"    ) - 1, 'dd-MM-yyyy'\r",
						"),",
						"          CharecontrolNumber = concat(Type, '-', InvoiceNumber)) ~> DCSKDateASOfDate",
						"DCSKDateASOfDate, source2 join(Type == BKTransType,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 derive(Amount_Paid_Received = (NetAmount+VatAmount)*grossValue) ~> derivedColumn1",
						"derivedColumn1 derive(Amount_Paid_ReceivedDesc = iif(\r",
						"    Amount_Paid_Received >= 800000.00,\r",
						"    iif(\r",
						"       Type == 'C', 'charge is high',\r",
						"       iif(\r",
						"          Type == 'P', 'Payable is high',\r",
						"          iif(\r",
						"             Type == 'K', 'Cheque is high',\r",
						"             iif(\r",
						"                Type == 'J', 'Journal entry is high',\r",
						"                iif(\r",
						"                    Type == 'R', 'Receipt is high',\r",
						"                    'Unknown Type'\r",
						"                )\r",
						"             )\r",
						"          )\r",
						"       )\r",
						"    ),\r",
						"    iif(\r",
						"       Amount_Paid_Received >= 400000.00,\r",
						"       iif(\r",
						"          Type == 'C', 'charge is medium',\r",
						"          iif(\r",
						"             Type == 'P', 'Payable is medium',\r",
						"             iif(\r",
						"                Type == 'K', 'Cheque is medium',\r",
						"                iif(\r",
						"                    Type == 'J', 'Journal entry is medium',\r",
						"                    iif(\r",
						"                       Type == 'R', 'Receipt is medium',\r",
						"                       'Unknown Type'\r",
						"                    )\r",
						"                )\r",
						"             )\r",
						"          )\r",
						"       ),\r",
						"       iif(\r",
						"          Amount_Paid_Received >= 100000.00,\r",
						"          iif(\r",
						"             Type == 'C', 'charge is Low',\r",
						"             iif(\r",
						"                Type == 'P', 'Payable is Low',\r",
						"                iif(\r",
						"                    Type == 'K', 'Cheque is Low',\r",
						"                    iif(\r",
						"                       Type == 'J', 'Journal entry is Low',\r",
						"                       iif(\r",
						"                          Type == 'R', 'Receipt is Low',\r",
						"                          'Unknown Type'\r",
						"                       )\r",
						"                    )\r",
						"                )\r",
						"             )\r",
						"          ),\r",
						"          iif(\r",
						"             Amount_Paid_Received < 100000.00,\r",
						"             iif(\r",
						"                Type == 'C', 'charge is very Low',\r",
						"                iif(\r",
						"                    Type == 'P', 'Payable is very Low',\r",
						"                    iif(\r",
						"                       Type == 'K', 'Cheque is very Low',\r",
						"                       iif(\r",
						"                          Type == 'J', 'Journal entry is very Low',\r",
						"                          iif(\r",
						"                             Type == 'R', 'Receipt is very Low',\r",
						"                             'Unknown Type'\r",
						"                          )\r",
						"                       )\r",
						"                    )\r",
						"                )\r",
						"             ),\r",
						"             'unknown'\r",
						"          )\r",
						"       )\r",
						"    )\r",
						")) ~> derivedColumn2",
						"derivedColumn2 derive(FileName = concat(\r",
						"  'sales_', \r",
						"  substring(toString(currentDate(),'dd-MM-yyyy'), 0, 2) ,\r",
						"  substring(toString(currentDate(),'dd-MM-yyyy'), 4, 2) , \r",
						"  substring(toString(currentDate(),'dd-MM-yyyy'), 7, 4), \r",
						"  '.xlsx'\r",
						"),",
						"          CreatedDate = currentDate()) ~> derivedColumn3",
						"derivedColumn3 select(mapColumn(",
						"          InvoiceNumber,",
						"          Date,",
						"          Type,",
						"          Period,",
						"          DueDate,",
						"          InvoiceDate,",
						"          FromDate,",
						"          ToDate,",
						"          NetAmount,",
						"          VatAmount,",
						"          grossValue,",
						"          SKDate,",
						"          AsOfDate,",
						"          CharecontrolNumber,",
						"          SKTransType,",
						"          TransDesc,",
						"          Amount_Paid_Received,",
						"          Amount_Paid_ReceivedDesc,",
						"          FileName,",
						"          CreatedDate",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select1",
						"select1 keyGenerate(output(InvoiceId as long),",
						"     startAt: 100L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['truncate table stage.salestype'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          InvoiceId,",
						"          InvoiceNumber,",
						"          Date,",
						"          Type,",
						"          Period,",
						"          DueDate,",
						"          InvoiceDate,",
						"          FromDate,",
						"          ToDate,",
						"          NetAmount,",
						"          VatAmount,",
						"          grossValue,",
						"          SKDate,",
						"          AsOfDate,",
						"          CharecontrolNumber,",
						"          SKTransType,",
						"          TransDesc,",
						"          Amount_Paid_Received,",
						"          Amount_Paid_ReceivedDesc,",
						"          FileName,",
						"          CreatedDate",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText_USSalescsv",
								"type": "DatasetReference"
							},
							"name": "USASales"
						},
						{
							"dataset": {
								"referenceName": "Internationalcsv1",
								"type": "DatasetReference"
							},
							"name": "InternationalSales"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Sales_country",
								"type": "DatasetReference"
							},
							"name": "sinkContainer",
							"description": "Export data to container"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as string,",
						"          Date as string,",
						"          Zip as string,",
						"          Units as string,",
						"          Revenue as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> USASales",
						"source(output(",
						"          ProductID as string,",
						"          Date as string,",
						"          Zip as string,",
						"          Units as string,",
						"          Revenue as string,",
						"          Country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['*.csv']) ~> InternationalSales",
						"USASales derive(Country = 'USA') ~> derivedColumn1",
						"derivedColumn1, InternationalSales union(byName: true)~> union1",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DepartmentID as string,",
						"          Name as string,",
						"          GroupName as string,",
						"          ModifiedDate as string",
						"     ),",
						"     partitionFileNames:['sales_country.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkContainer"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_Sales_Product')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "USASALES_CSV",
								"type": "DatasetReference"
							},
							"name": "USASALES"
						},
						{
							"dataset": {
								"referenceName": "international_sales_csv_metadata",
								"type": "DatasetReference"
							},
							"name": "InternationalSales"
						},
						{
							"dataset": {
								"referenceName": "Products_csv",
								"type": "DatasetReference"
							},
							"name": "Products"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_tablesales1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_tablesales2",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						},
						{
							"name": "cast2"
						},
						{
							"name": "derivedCountry"
						},
						{
							"name": "union1"
						},
						{
							"name": "totalrevenueaggregate"
						},
						{
							"name": "derivedCountryCode"
						},
						{
							"name": "surrogateKeyID"
						},
						{
							"name": "select1"
						},
						{
							"name": "joinSalesProducts"
						},
						{
							"name": "select2"
						},
						{
							"name": "split1"
						},
						{
							"name": "rank1"
						},
						{
							"name": "rank2"
						},
						{
							"name": "sort1"
						},
						{
							"name": "sort2"
						}
					],
					"udfLibraries": [
						{
							"referenceName": "string_library",
							"type": "DataFlowReference"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as string,",
						"          Date as string,",
						"          Zip as string,",
						"          Units as string,",
						"          Revenue as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> USASALES",
						"source(output(",
						"          ProductID as string,",
						"          Date as string,",
						"          Zip as string,",
						"          Units as string,",
						"          Revenue as decimal(10,0),",
						"          Country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> InternationalSales",
						"source(output(",
						"          ProductID as string,",
						"          ProductName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Products",
						"InternationalSales cast(output(",
						"          Date as date 'yyyy-MM-dd'",
						"     ),",
						"     errors: true) ~> cast1",
						"USASALES cast(output(",
						"          Date as date 'yyyy-MM-dd'",
						"     ),",
						"     errors: true) ~> cast2",
						"cast2 derive(Country = 'USA') ~> derivedCountry",
						"derivedCountry, cast1 union(byName: true)~> union1",
						"union1 aggregate(groupBy(Country,",
						"          ProductID),",
						"     TotalRevenue = sum(Revenue)) ~> totalrevenueaggregate",
						"totalrevenueaggregate derive(CountryCode = DefaultCountryCode(Country)) ~> derivedCountryCode",
						"derivedCountryCode keyGenerate(output(SNo as long),",
						"     startAt: 100L,",
						"     stepValue: 1L) ~> surrogateKeyID",
						"surrogateKeyID select(mapColumn(",
						"          SNo,",
						"          ProductID,",
						"          CountryCode,",
						"          Country,",
						"          TotalRevenue",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, Products join(select1@ProductID == Products@ProductID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSalesProducts",
						"joinSalesProducts select(mapColumn(",
						"          SNo,",
						"          ProductID = select1@ProductID,",
						"          CountryCode,",
						"          Country,",
						"          ProductName,",
						"          TotalRevenue",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 split(TotalRevenue > 500.000,",
						"     disjoint: false) ~> split1@(Revenue, Others)",
						"split1@Revenue rank(desc(TotalRevenue, true),",
						"     output(rank as long)) ~> rank1",
						"split1@Others rank(desc(TotalRevenue, true),",
						"     output(Rank as long)) ~> rank2",
						"rank1 sort(asc(rank, true)) ~> sort1",
						"rank2 sort(asc(Rank, true)) ~> sort2",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['truncate table tablesales1'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
						"sort2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['truncate table tablesales2'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink2"
					]
				}
			},
			"dependsOn": []
		}
	]
}